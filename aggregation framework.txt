//db //mdbAggregationFamework
//show collections //persons
//db.persons.count() //1000
//db.persons.aggregate([])

syntax:
db.coll.aggregate([{},{}])

stage:
{$<stageOperator>: {}}

 example: {$match:{age:{$gt:20}}}
	  {$group:{_id:"$age"}}
	  {$sort:{count:-1}}

//stages operators:
$match  $group  $project
$sort   $count	$limit
$skip	$out 

-$match: It is used for filtering the documents can reduce the amount of documents that are given as input to the next stage.
-$project: It is used to select some specific fields from a collection.
-$group: It is used to group documents based on some value.
-$sort: It is used to sort the document that is rearranging them
-$skip: It is used to skip n number of documents and passes the remaining documents
-$limit: It is used to pass first n number of documents thus limiting them.
-$unwind: It is used to unwind documents that are using arrays i.e. it deconstructs an array field in the documents to return documents for each element.
-$out: It is used to write resulting documents to a new collection


$match:

//db.persons
//    .aggregate([
//    //stage 1
//    {$match:{isActive:true}}
//        ])

//print those whose value has tag array with size 3
db.persons
    .aggregate([
    {$match:{tags:{$size:3}}}
    ])


$group:

//distinct value gulo dea group toiri hoy
//like: alada eyeColor koyta ache
//koyjon er ase aita na kintu.just koyta 
//alada alada eyeColor ache

//koyta alada name ache

//db.persons
//    .aggregate([
//    
//    {$group:{_id:"$name"}}
//        ])

//db.persons
//    .aggregate([
//    
//    {$group:{_id:"$eyeColor"}}
//        ])

//db.persons
//    .aggregate([
//    
//    {$group:{_id:"$gender"}}
//        ])


//nested

//db.persons
//    .aggregate([
//    
//    {$group:{_id:
//        {eyeColor:"$eyeColor",
//            favoriteFruit:"$favoriteFruit"}
//        }}
//        ])

db.persons
    .aggregate([
    
    {$group:{_id:
        {eyeColor:"$eyeColor",
            age:"$age"}
        }}
        ])


